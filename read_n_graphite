#!/usr/bin/env ruby

require 'socket'
require 'serialport'

@graphite_port = 2003
@graphite_host = "127.0.0.1"

port_str = "/dev/ttyUSB0"
baud_rate = 9600
data_bits = 8
stop_bits = 1
parity = SerialPort::NONE

@OPEN_STATE_FILE = "/var/tmp/hackspace_open_state"

sp = SerialPort.new(port_str, baud_rate, data_bits, stop_bits, parity)

buffer = ''

def seconds_since_epoch
  Time.now.strftime('%s')
end

def graphite_send(key, val)
  begin 
    sock = TCPSocket.new( @graphite_host, @graphite_port )  
    sock.puts("#{key} #{val} #{seconds_since_epoch}")
    sock.close
    puts "Sent: #{key} #{val}"
  rescue
    puts "Sending to graphite failed :("
  end
end

def process_arduino_output(b) 
	if ( b =~ /^Temperature for Device 1 is: ([0-9\.]+)/ )
	  graphite_send('bb.megaboard.temperature_degc',  $1)
	elsif ( b =~ /^Temperature for Device 2 is: ([0-9\.]+)/ )
	  graphite_send('bb.laser.water.temperature_degc',  $1)
	elsif ( b =~ /^Analog LDR value: ([0-9]+)/ )
	  graphite_send('bb.megaboard.ldr',  $1)
	elsif ( b =~ /^Hackspace open state: ([0-1])/ )
	  graphite_send('bb.hackspace.open_state',  $1)
	  state = $1 ? 'open' : 'closed'
	  hackspace_open_state(state)
	end
end

def hackspace_open_state(state) 
	File.open(@OPEN_STATE_FILE, 'w') do |file|
		file.puts("#{state}\n")
	end
end

#just read forever
while true do
  c = sp.getc
  if ( c == 10 ) then
    # gots newline
  	process_arduino_output(buffer)
	buffer = ''
  else 
  	buffer << c
  end

end

sp.close       
